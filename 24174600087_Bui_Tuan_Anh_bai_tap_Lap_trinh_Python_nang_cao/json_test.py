# import json
# data = {"name": "Ng VƒÉn A", "age": 23, "skills": ["AI", "Python"]}
# json_str = json.dumps(data)
# print(json_str)
# json_str = json.dumps(data)
# print(json_str)
# import json
# def complex_handler(obj):
#     if isinstance(obj, complex):
#         return [obj.real, obj.imag]
#     raise TypeError(repr(obj) + " kh√¥ng th·ªÉ m√£ h√≥a JSON")
# data = {"z": 2 + 3j}
# complex_obj = json.dumps(data, default=complex_handler)
# print(complex_obj)
# import json
# data = {"name": "A", "age": 35, "company": "ƒê·∫•t Vi·ªát"}
# json_string = json.dumps(data, ensure_ascii=False)
# print(json_string)
# print(type(json_string))
# import json

# # ƒê·ªëi t∆∞·ª£ng Python (ƒë·ªëi t∆∞·ª£ng dict)
# data = {
#     "Ho_va_ten": "Nguy·ªÖn VƒÉn A",
#     "Nam_sinh": 2025,
#     "Gioi_tinh": "Nam",
#     "So_dt": "0123456789",
#     "email": "nguyenvana@uneti.edu.vn"
# }

# # S·ª≠ d·ª•ng 'with open' ƒë·ªÉ m·ªü t·ªáp 'thongtin.json' v·ªõi ch·∫ø ƒë·ªô ghi (w)
# # H√†m json.dump() s·∫Ω ghi ƒë·ªëi t∆∞·ª£ng Python (dict) v√†o t·ªáp JSON
# with open("thongtin.json", "w", encoding="utf-8") as f:
#     json.dump(data, f, ensure_ascii=False, indent=4)

# print("D·ªØ li·ªáu ƒë√£ ƒë∆∞·ª£c ghi th√†nh c√¥ng v√†o t·ªáp 'thongtin.json'.")

# # (T√πy ch·ªçn) In n·ªôi dung t·ªáp ƒë·ªÉ ki·ªÉm tra
# with open("thongtin.json", "r", encoding="utf-8") as f:
#     print("\nN·ªôi dung t·ªáp 'thongtin.json' ‚Äî>")
#     print(f.read())
# import json

# # H√†m ki·ªÉm tra chu·ªói JSON c√≥ ch·ª©a ƒë·ªëi t∆∞·ª£ng ph·ª©c (complex object) hay kh√¥ng
# def is_complex(object):
#     # Ki·ªÉm tra xem trong ƒë·ªëi t∆∞·ª£ng c√≥ t·ªìn t·∫°i kh√≥a '__complex__' hay kh√¥ng
#     if '__complex__' in object:
#         # N·∫øu c√≥, t·∫°o m·ªôt s·ªë ph·ª©c t·ª´ th√¥ng tin trong ƒë·ªëi t∆∞·ª£ng
#         return complex(object['real'], object['img'])
#     # N·∫øu kh√¥ng c√≥ kh√≥a '__complex__', ƒë·ªëi t∆∞·ª£ng kh√¥ng ph·∫£i l√† ƒë·ªëi t∆∞·ª£ng ph·ª©c,
#     # tr·∫£ v·ªÅ ƒë·ªëi t∆∞·ª£ng g·ªëc
#     return object


# def main():
#     # S·ª≠ d·ª•ng h√†m json.loads() v·ªõi object_hook ƒë·ªÉ ki·ªÉm tra v√† chuy·ªÉn ƒë·ªïi ƒë·ªëi t∆∞·ª£ng
#     # ph·ª©c trong chu·ªói JSON
#     complex_object = json.loads('{"__complex__": true, "real": 4, "img": 5}', 
#                                 object_hook=is_complex)
#     simple_object = json.loads('{"real": 6, "img": 7}', 
#                                object_hook=is_complex)

#     # In k·∫øt qu·∫£ ph√¢n t√≠ch chu·ªói JSON cho ƒë·ªëi t∆∞·ª£ng ph·ª©c v√† ƒë·ªëi t∆∞·ª£ng th∆∞·ªùng
#     print("ƒê·ªëi t∆∞·ª£ng s·ªë ph·ª©c......:", complex_object)
#     print("ƒê·ªëi t∆∞·ª£ng b√¨nh th∆∞·ªùng......:", simple_object)


# if __name__ == "__main__":
#     main()
import json
# Import l·ªõp JSONDecoder t·ª´ module json.decoder
from json.decoder import JSONDecoder

# Chu·ªói JSON ch·ª©a d·ªØ li·ªáu m√†u s·∫Øc
colour_string = '{"colour": ["red", "yellow"]}'

# üü¢ S·ª≠ d·ª•ng JSONDecoder ƒë·ªÉ gi·∫£i m√£ chu·ªói JSON th√†nh ƒë·ªëi t∆∞·ª£ng Python.
# JSONDecoder l√† l·ªõp con c·ªßa json.JSONDecoder, cho ph√©p t√πy ch·ªânh qu√° tr√¨nh gi·∫£i m√£.
# Ph∆∞∆°ng th·ª©c decode() s·∫Ω gi·∫£i m√£ chu·ªói JSON v√† tr·∫£ v·ªÅ ƒë·ªëi t∆∞·ª£ng Python t∆∞∆°ng ·ª©ng.
decoded_object = JSONDecoder().decode(colour_string)

# In ƒë·ªëi t∆∞·ª£ng Python ƒë√£ gi·∫£i m√£ v√† ki·ªÉu d·ªØ li·ªáu c·ªßa ƒë·ªëi t∆∞·ª£ng ƒë√≥
print(decoded_object)
print(type(decoded_object))

